# Type stubs for Django models to help with linting
from typing import Any, TypeVar, Generic, Type

T = TypeVar('T')

class Model:
    objects: Any
    DoesNotExist: Type[Exception]
    
    def save(self, *args: Any, **kwargs: Any) -> None: ...
    def delete(self, *args: Any, **kwargs: Any) -> tuple[int, dict[str, int]]: ...

class QuerySet(Generic[T]):
    def filter(self, *args: Any, **kwargs: Any) -> 'QuerySet[T]': ...
    def exclude(self, *args: Any, **kwargs: Any) -> 'QuerySet[T]': ...
    def get(self, *args: Any, **kwargs: Any) -> T: ...
    def create(self, **kwargs: Any) -> T: ...
    def get_or_create(self, defaults: dict[str, Any] = None, **kwargs: Any) -> tuple[T, bool]: ...
    def update(self, **kwargs: Any) -> int: ...
    def delete(self) -> tuple[int, dict[str, int]]: ...
    def exists(self) -> bool: ...
    def count(self) -> int: ...
    def order_by(self, *args: Any) -> 'QuerySet[T]': ...
    def select_related(self, *args: Any) -> 'QuerySet[T]': ...
    def prefetch_related(self, *args: Any) -> 'QuerySet[T]': ...
    def select_for_update(self) -> 'QuerySet[T]': ...
    def values(self, *args: Any) -> 'QuerySet[dict[str, Any]]': ...
    def annotate(self, **kwargs: Any) -> 'QuerySet[T]': ...
    def aggregate(self, **kwargs: Any) -> dict[str, Any]: ...

class Manager:
    def all(self) -> QuerySet[Any]: ...
    def filter(self, *args: Any, **kwargs: Any) -> QuerySet[Any]: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, **kwargs: Any) -> Any: ...
    def get_or_create(self, defaults: dict[str, Any] = None, **kwargs: Any) -> tuple[Any, bool]: ...
    def update(self, **kwargs: Any) -> int: ...
    def delete(self) -> tuple[int, dict[str, int]]: ...
    def exists(self) -> bool: ...
    def count(self) -> int: ...
    def order_by(self, *args: Any) -> QuerySet[Any]: ...
    def select_related(self, *args: Any) -> QuerySet[Any]: ...
    def prefetch_related(self, *args: Any) -> QuerySet[Any]: ...
    def select_for_update(self) -> QuerySet[Any]: ...
    def values(self, *args: Any) -> QuerySet[dict[str, Any]]: ...
    def annotate(self, **kwargs: Any) -> QuerySet[Any]: ...
    def aggregate(self, **kwargs: Any) -> dict[str, Any]: ...

# Mock Django transaction
class transaction:
    @staticmethod
    def atomic() -> Any: ... 